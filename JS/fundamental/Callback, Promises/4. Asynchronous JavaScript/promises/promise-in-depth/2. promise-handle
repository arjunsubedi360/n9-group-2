### Module 2: Promise States and Chaining

In this module, we'll explore the three states of a Promise (pending, fulfilled, and rejected), learn how to chain multiple asynchronous operations using `.then()`, and handle errors with `.catch()`.

#### 1. Understanding Promise States:

- **Pending**: This is the initial state of a Promise. It represents that the asynchronous operation associated with the Promise hasn't completed yet.
  
- **Fulfilled**: This state indicates that the asynchronous operation has completed successfully, and the Promise has a resolved value.

- **Rejected**: This state indicates that the asynchronous operation has failed, and the Promise has a reason for the failure.

#### 2. Chaining Multiple Asynchronous Operations:

We can use the `.then()` method to chain multiple asynchronous operations together. Each `.then()` block receives the result of the previous Promise and can perform further operations or transformations on it before passing it to the next `.then()` block.

```javascript
fetchData()
  .then(processData)
  .then(displayData)
  .then(() => {
    console.log("All operations completed successfully!");
  })
  .catch((error) => {
    console.error("An error occurred:", error);
  });
```

#### 3. Error Handling with `.catch()`:

The `.catch()` method is used to catch any errors that occur during the execution of Promise chains. It's placed at the end of the chain to handle any rejections that occur in any of the previous `.then()` blocks.

```javascript
fetchData()
  .then(processData)
  .then(displayData)
  .catch((error) => {
    console.error("An error occurred:", error);
  });
```