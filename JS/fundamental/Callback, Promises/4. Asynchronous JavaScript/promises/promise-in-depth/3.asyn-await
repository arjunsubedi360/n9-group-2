### Promise vs. Async/Await Syntax:

#### 1. Promise Syntax:
```javascript
function fetchData() {
    return new Promise((resolve, reject) => {
        // Asynchronous operation, e.g., fetching data from an API
        setTimeout(() => {
            const data = "Data fetched successfully";
            resolve(data); // Resolve the Promise with the fetched data
        }, 2000);
    });
}

// Consuming the Promise
fetchData()
    .then(data => {
        console.log(data); // Data fetched successfully
    })
    .catch(error => {
        console.error(error);
    });
```

#### 2. Async/Await Syntax:
```javascript
async function fetchData() {
    return new Promise((resolve, reject) => {
        // Asynchronous operation, e.g., fetching data from an API
        setTimeout(() => {
            const data = "Data fetched successfully";
            resolve(data); // Resolve the Promise with the fetched data
        }, 2000);
    });
}

// Consuming the Async function using Await
async function getData() {
    try {
        const data = await fetchData();
        console.log(data); // Data fetched successfully
    } catch (error) {
        console.error(error);
    }
}

getData();
```

### Differences and Advantages of Async/Await Syntax:

1. **Readability and Syntax**:
   - Async/Await syntax offers a more concise and synchronous-looking code structure compared to Promise chains. This makes it easier to read and understand, especially for developers who are not familiar with Promise chaining.

2. **Error Handling**:
   - With Async/Await, error handling becomes more straightforward. Instead of using `.then()` and `.catch()`, you can use a try-catch block, which closely resembles synchronous error handling. This simplifies error handling logic and makes code more maintainable.

3. **Sequential Code Execution**:
   - Async/Await syntax allows writing asynchronous code that looks and behaves like synchronous code. This makes it easier to write sequential code without the need for nested Promise chains, leading to cleaner and more manageable code.

4. **Error Propagation**:
   - Errors in Promise chains require careful propagation to ensure they are caught at the appropriate level. With Async/Await, errors are automatically caught within the nearest try-catch block, reducing the risk of unhandled exceptions.

5. **Support for Promises**:
   - Async/Await is built on top of Promises and is essentially syntactic sugar over Promise-based code. This means that Async/Await can be used with existing Promise-based code seamlessly, allowing for gradual adoption and backward compatibility.
