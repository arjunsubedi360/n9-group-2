//Real example 
// const GIT_HUB_API = "https://api.github.com/users/ngimatendi";

// fetch(GIT_HUB_API)
//   .then((response) => {
//     if (!response.ok) {
//       throw new Error("Network response was not ok");
//     }
//     return response.json();
//   })
//   .then((data) => {
//     const userImage = document.createElement("img");
//     const userName = document.createElement("h2"); // Assuming the user's name is displayed as a heading
    
//     userImage.src = data.avatar_url;
//     userImage.alt = "User Image";
    
//     userName.textContent = data.name || "Name not provided"; // Display the user's name or a default message if it's not provided
    
//     document.body.appendChild(userName);
//     document.body.appendChild(userImage);
//   })
//   .catch((error) => {
//     console.error("Error fetching data:", error);
//   });



Sure! Let's break down the differences between using Promises and async/await in JavaScript with examples.

### Using Promises

A Promise is an object representing the eventual completion or failure of an asynchronous operation.

**Example:**

```javascript
function fetchData() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const data = { name: 'John', age: 30 };
      resolve(data);
    }, 2000);
  });
}

fetchData()
  .then(data => {
    console.log('Data received:', data);
  })
  .catch(error => {
    console.error('Error:', error);
  });
```

In this example, `fetchData` returns a Promise that resolves after 2 seconds. We handle the resolved value with `.then()` and catch any potential errors with `.catch()`.

### Using async/await

The `async` keyword allows us to write functions that return a Promise, and the `await` keyword can be used to wait for the Promise to resolve.

**Example:**

```javascript
async function fetchData() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const data = { name: 'John', age: 30 };
      resolve(data);
    }, 2000);
  });
}

async function getData() {
  try {
    const data = await fetchData();
    console.log('Data received:', data);
  } catch (error) {
    console.error('Error:', error);
  }
}

getData();
```

In this example, `fetchData` is the same function returning a Promise. The `getData` function is marked as `async`, and within it, we use `await` to wait for `fetchData` to resolve. This makes the asynchronous code look and behave more like synchronous code, improving readability.

### Key Differences

1. **Syntax and Readability:**
   - Promises: Use `.then()` and `.catch()` for handling resolved values and errors. This can lead to "callback hell" or complex chaining.
   - async/await: Use `await` within `async` functions, making the code look more like synchronous code, which is easier to read and maintain.

2. **Error Handling:**
   - Promises: Errors are handled with `.catch()`.
   - async/await: Errors are handled using `try...catch` blocks, which can be more intuitive for those familiar with synchronous error handling.

3. **Execution Flow:**
   - Promises: Chaining multiple asynchronous operations can sometimes become less readable.
   - async/await: The code appears to execute sequentially, which can make complex asynchronous operations easier to follow.

### Example with Multiple Asynchronous Operations

**Using Promises:**

```javascript
function fetchUser() {
  return new Promise((resolve) => {
    setTimeout(() => resolve({ id: 1, name: 'John' }), 1000);
  });
}

function fetchPosts(userId) {
  return new Promise((resolve) => {
    setTimeout(() => resolve(['Post 1', 'Post 2']), 1000);
  });
}

fetchUser()
  .then(user => {
    console.log('User:', user);
    return fetchPosts(user.id);
  })
  .then(posts => {
    console.log('Posts:', posts);
  })
  .catch(error => {
    console.error('Error:', error);
  });
```

**Using async/await:**

```javascript
async function fetchUser() {
  return new Promise((resolve) => {
    setTimeout(() => resolve({ id: 1, name: 'John' }), 1000);
  });
}

async function fetchPosts(userId) {
  return new Promise((resolve) => {
    setTimeout(() => resolve(['Post 1', 'Post 2']), 1000);
  });
}

async function getUserAndPosts() {
  try {
    const user = await fetchUser();
    console.log('User:', user);
    const posts = await fetchPosts(user.id);
    console.log('Posts:', posts);
  } catch (error) {
    console.error('Error:', error);
  }
}

getUserAndPosts();
```

In both cases, we first fetch the user and then fetch the posts related to that user. However, the `async/await` version looks cleaner and is easier to follow, especially as the number of asynchronous operations grows.