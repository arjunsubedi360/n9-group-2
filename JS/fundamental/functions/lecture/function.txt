### 2.1 Functions
Functions in JavaScript allow you to encapsulate code logic and use it in a modular and reusable way.

#### 2.1.1 Definition of a Function
A function is a block of code designed to perform a specific task. Functions in JavaScript can be defined in several ways, with different characteristics and use cases.

#### 2.1.2 Basic Syntax for Creating a Function
The traditional way to create a function in JavaScript is with the `function` keyword. Here's a simple example:

```javascript
function sayHello() {
    console.log("Hello!");
}
```

This creates a function named `sayHello` that, when called, prints "Hello!" to the console.

#### 2.1.3 How to Call a Function
To call a function, use its name followed by parentheses. If the function takes parameters, pass them inside the parentheses.

```javascript
sayHello(); // Outputs: Hello!
```

#### 2.1.4 Passing Arguments to a Function
Arguments are the values you provide to a function when calling it. If a function is defined with parameters, you need to pass arguments when calling it.

```javascript
function greet(name) {
    console.log(`Hello, ${name}!`);
}

greet("Alice"); // Outputs: Hello, Alice!
```

#### 2.1.5 Returning a Value from a Function
Functions can return values using the `return` keyword. Once a return statement is executed, the function exits, and any code after it is not executed.

```javascript
function add(a, b) {
    return a + b;
}

let sum = add(3, 4); // sum is 7
```

#### 2.1.6 Using Function Parameters and Arguments
Parameters are variables defined in the function signature. Arguments are the values passed when calling a function. You can have functions with default parameters, variable numbers of parameters (using `...`), or no parameters.

```javascript
function multiply(a, b = 2) {
    return a * b;
}

let result = multiply(3); // Default value of `b` is used, result is 6
```

#### 2.1.7 Named Functions
A named function is explicitly given a name. This name is used to call the function or reference it in other parts of your code.

```javascript
function divide(a, b) {
    if (b === 0) {
        throw new Error("Division by zero");
    }
    return a / b;
}
```

#### 2.1.8 Anonymous Functions
Anonymous functions don't have a name. These are commonly used in callback functions, event handlers, or when passing functions as arguments.

```javascript
const numbers = [1, 2, 3, 4, 5];
numbers.forEach(function (num) {
    console.log(num); // Outputs each number in the array
});
```

#### 2.1.9 Arrow Functions
Arrow functions are a more concise syntax for defining functions, introduced in ES6. They use the `=>` syntax and often don't require the `function` keyword.

```javascript
const square = (x) => x * x;  // A concise function that returns the square of `x`
```

Arrow functions are especially useful for short, single-expression functions.

#### 2.1.10 Immediately Invoked Function Expressions (IIFE)
An Immediately Invoked Function Expression is a function that is defined and immediately called. This pattern is often used to create a new scope or encapsulate code.

```javascript
(function () {
    console.log("This function runs immediately!");
})();  // Outputs: This function runs immediately!
```

This pattern can be used to avoid polluting the global namespace and to isolate code.