#### Examples

**1. Higher-Order Function Example:**

A higher-order function that takes another function as an argument and returns a function:

```javascript
// A higher-order function that takes another function as an argument
function applyFunction(func, value) {
    return func(value);
}

// A simple function to be passed
function square(x) {
    return x * x;
}

// Using the higher-order function
const result = applyFunction(square, 5);
console.log(result);  // Output: 25
```

**2. First-Class Citizen Function Example:**

Functions can be assigned to variables, passed as arguments, and returned from other functions:

```javascript
// Assigning a function to a variable
const greet = function(name) {
    return `Hello, ${name}!`;
};

// Passing a function as an argument
function displayMessage(func, message) {
    console.log(func(message));
}

// Using the function
displayMessage(greet, "Alice");  // Output: Hello, Alice!
```

#### Challenges

**Challenge 1: Implement a Higher-Order Function**

Write a higher-order function named `filterArray` that takes an array and a predicate function (a function that returns `true` or `false` for each element) and returns a new array containing only the elements that satisfy the predicate function.

```javascript
function filterArray(array, predicate) {
    const result = [];
    for (let element of array) {
        if (predicate(element)) {
            result.push(element);
        }
    }
    return result;
}

// Example usage:
const numbers = [1, 2, 3, 4, 5, 6];
const isEven = function(num) {
    return num % 2 === 0;
};

const evenNumbers = filterArray(numbers, isEven);
console.log(evenNumbers);  // Output: [2, 4, 6]
```

**Challenge 2: Implement a Function Returning Another Function**

Write a function named `createMultiplier` that takes a number and returns a new function. The returned function should multiply any given number by the original number.

```javascript
function createMultiplier(multiplier) {
    return function(value) {
        return value * multiplier;
    };
}

// Example usage:
const double = createMultiplier(2);
const triple = createMultiplier(3);

console.log(double(5));  // Output: 10
console.log(triple(5));  // Output: 15
```

**Challenge 3: Combining Higher-Order Functions and First-Class Functions**

Write a function named `mapArray` that takes an array and a transformation function. It should return a new array where each element is the result of applying the transformation function to the corresponding element in the original array.

```javascript
function mapArray(array, transform) {
    const result = [];
    for (let element of array) {
        result.push(transform(element));
    }
    return result;
}

// Example usage:
const numbers = [1, 2, 3, 4, 5];
const square = function(num) {
    return num * num;
};

const squaredNumbers = mapArray(numbers, square);
console.log(squaredNumbers);  // Output: [1, 4, 9, 16, 25]
```
